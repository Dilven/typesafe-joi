import * as Joi from '../src'
import { type, testInvariant, testSchema, RawSchemaValue } from './util';

// Schemas should have correct default types
testSchema(Joi.any(), type<undefined>(), true)
testSchema(Joi.array(), type<never[] | undefined>(), true)
testSchema(Joi.bool(), type<boolean | undefined>(), true)
testSchema(Joi.boolean(), type<boolean | undefined>(), true)
testSchema(Joi.binary(), type<Buffer | undefined>(), true)
testSchema(Joi.date(), type<Date | undefined>(), true)
testSchema(Joi.func(), type<Function | undefined>(), true)
testSchema(Joi.number(), type<number | undefined>(), true)
testSchema(Joi.object(), type<{} | undefined>(), true)
testSchema(Joi.string(), type<string | undefined>(), true)
testSchema(Joi.alt(), type<undefined>(), true)
testSchema(Joi.alternatives(), type<undefined>(), true)
testSchema(Joi.lazy(() => Joi.string()), type<string | undefined>(), true)

testInvariant<RawSchemaValue<Joi.AnySchema>, undefined>(true)
testInvariant<RawSchemaValue<Joi.ArraySchema>, never[] | undefined>(true)
testInvariant<RawSchemaValue<Joi.SparseArraySchema>, undefined[] | undefined>(true)
testInvariant<RawSchemaValue<Joi.BooleanSchema>, boolean | undefined>(true)
testInvariant<RawSchemaValue<Joi.BinarySchema>, Buffer | undefined>(true)
testInvariant<RawSchemaValue<Joi.DateSchema>, Date | undefined>(true)
testInvariant<RawSchemaValue<Joi.FunctionSchema>, Function | undefined>(true)
testInvariant<RawSchemaValue<Joi.NumberSchema>, number | undefined>(true)
testInvariant<RawSchemaValue<Joi.ObjectSchema>, {} | undefined>(true)
testInvariant<RawSchemaValue<Joi.StringSchema>, string | undefined>(true)
testInvariant<RawSchemaValue<Joi.AlternativesSchema>, undefined>(true)
testInvariant<RawSchemaValue<Joi.LazySchema>, undefined>(true)

testInvariant<RawSchemaValue<Joi.RequiredAnySchema>, never>(true)
testInvariant<RawSchemaValue<Joi.RequiredArraySchema>, never[]>(true)
testInvariant<RawSchemaValue<Joi.RequiredSparseArraySchema>, undefined[]>(true)
testInvariant<RawSchemaValue<Joi.RequiredBooleanSchema>, boolean>(true)
testInvariant<RawSchemaValue<Joi.RequiredBinarySchema>, Buffer>(true)
testInvariant<RawSchemaValue<Joi.RequiredDateSchema>, Date>(true)
testInvariant<RawSchemaValue<Joi.RequiredFunctionSchema>, Function>(true)
testInvariant<RawSchemaValue<Joi.RequiredNumberSchema>, number>(true)
testInvariant<RawSchemaValue<Joi.RequiredObjectSchema>, {}>(true)
testInvariant<RawSchemaValue<Joi.RequiredStringSchema>, string>(true)
testInvariant<RawSchemaValue<Joi.RequiredAlternativesSchema>, never>(true)
testInvariant<RawSchemaValue<Joi.RequiredLazySchema>, never>(true)
